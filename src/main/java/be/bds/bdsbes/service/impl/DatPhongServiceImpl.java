package be.bds.bdsbes.service.impl;

import be.bds.bdsbes.entities.*;
import be.bds.bdsbes.entities.enums.RoomOrderStatus;
import be.bds.bdsbes.entities.enums.StatusRoom;
import be.bds.bdsbes.exception.ServiceException;
import be.bds.bdsbes.payload.CustomerUseRoom;
import be.bds.bdsbes.payload.DatPhongMap;
import be.bds.bdsbes.payload.DatPhongMapping;
import be.bds.bdsbes.payload.PhongResponse1;
import be.bds.bdsbes.repository.*;
import be.bds.bdsbes.service.dto.MonthlyBookingDTO;
import be.bds.bdsbes.service.iService.IDatPhongService;
import be.bds.bdsbes.service.dto.DatPhongDTO;
import be.bds.bdsbes.service.dto.response.DatPhongResponse;
import be.bds.bdsbes.service.mapper.DatPhongMapper;
import be.bds.bdsbes.service.mapper.DatPhongMapper2;
import be.bds.bdsbes.service.mapper.PhongMapper;
import be.bds.bdsbes.utils.AppConstantsUtil;
import be.bds.bdsbes.utils.ServiceExceptionBuilderUtil;
import be.bds.bdsbes.utils.ValidationErrorUtil;
import be.bds.bdsbes.utils.dto.KeyValue;
import be.bds.bdsbes.utils.dto.PagedResponse;
import be.bds.bdsbes.utils.dto.ServiceException1;
import be.bds.bdsbes.utils.dto.ValidationErrorResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.*;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
public class DatPhongServiceImpl implements IDatPhongService {
    @Autowired
    private PhongRepository phongRepository;
    @Autowired
    private KhachHangRepository khachHangRepository;
    @Autowired
    private HoaDonRepository hoaDonRepository;

    @Autowired
    DatPhongRepository datPhongRepository;

    @Autowired
    ThongBaoRepository thongBaoRepository;

    @Autowired
    VoucherRepository voucherRepository;

    @Autowired
    DatPhongMapper datPhongMapper;

    @Autowired
    PhongMapper phongMapper;

    @Autowired
    DatPhongMapper2 datPhongMapper2;

    public int getNumberOfRecords() {
        Long count = datPhongRepository.count();
        return count.intValue();
    }


    private String generateAutoCode() {
        int numberOfDigits = 4;

        int numberOfExistingRecords = getNumberOfRecords();

        String autoCode = "DP" + String.format("%0" + numberOfDigits + "d", numberOfExistingRecords + 1);

        return autoCode;
    }

    @Override
    public List<DatPhong> getList() {
        return datPhongRepository.findAll();
    }

    @Override
    public List<DatPhongResponse> getAll() {
        return datPhongRepository.getAllDatPhong();
    }

    @Override
    public DatPhongResponse getOne(Long id) {
        return datPhongRepository.get(id);
    }

    /**
     * Creates a new `DatPhong` object based on the provided `DatPhongDTO`.
     *
     * @param datPhongDTO the `DatPhongDTO` object containing the data for creating the `DatPhong` object
     * @return the created `DatPhong` object
     */
    @Override
    public Boolean create(DatPhongDTO datPhongDTO) throws ServiceException {
        ZoneId timeZone = ZoneId.of("Asia/Ho_Chi_Minh");
        if (datPhongDTO.getCheckIn().isAfter(datPhongDTO.getCheckOut())) {
             throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckIn))
                    .build();
        }
        if (datPhongDTO.getCheckIn().toLocalDate().isBefore(LocalDate.now())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckInBeforeDateNow))
                    .build();
        }

        if (datPhongRepository.validateCheckIn(datPhongDTO.getIdPhong(), datPhongDTO.getCheckIn(), datPhongDTO.getCheckOut())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckDateBook))
                    .build();
        }
        if (datPhongDTO.getCheckOut().toLocalDate().equals(datPhongDTO.getCheckIn().toLocalDate())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkOut", ValidationErrorUtil.CheckInBeforeDateNow))
                    .build();
        }
        String autoGeneratedCode = generateAutoCode();
        ZonedDateTime checkInDate = datPhongDTO.getCheckIn().atZone(timeZone);
        ZonedDateTime adjustedCheckInDate = checkInDate.plusHours(7);
        ZonedDateTime checkOutDate = datPhongDTO.getCheckOut().atZone(timeZone);
        ZonedDateTime adjustedCheckOutDate = checkOutDate.plusHours(7);
        DatPhong datPhong = new DatPhong();
        Random random = new Random();
        int min = 1;
        int max = Integer.MAX_VALUE;
        int ma = random.nextInt(max - min + 1) + min;
        datPhong.setMa("DP" + ma);
        datPhong.setNgayDat(LocalDateTime.now());
        datPhong.setCheckIn(adjustedCheckInDate.toLocalDateTime());
        datPhong.setCheckOut(adjustedCheckOutDate.toLocalDateTime());
        datPhong.setSoNguoi(datPhongDTO.getSoNguoi());
        datPhong.setGhiChu(datPhongDTO.getGhiChu());
        datPhong.setTrangThai(datPhongDTO.getTrangThai());
        datPhong.setTongGia(datPhongDTO.getTongGia());
//        if(datPhongDTO.getIdVoucher() != null){
//            Voucher voucher = voucherRepository.findById(datPhongDTO.getIdVoucher()).get();
//            datPhong.setVoucher(Voucher.builder().id(datPhongDTO.getIdVoucher()).build());
//            voucher.setSoLuong(voucher.getSoLuong() - 1);
//            this.voucherRepository.save(voucher);
//        }
        Long idKhachHang = khachHangRepository.findByIdKhachHang(datPhongDTO.getUserId());
        datPhong.setKhachHang(KhachHang.builder().id(idKhachHang).build());
        datPhong.setPhong(Phong.builder().id(datPhongDTO.getIdPhong()).build());
        Long idHoaDon = hoaDonRepository.getId(idKhachHang, LocalDate.now());
        datPhong.setHoaDon(HoaDon.builder().id(idHoaDon).build());
        this.datPhongRepository.save(datPhong);
        return true;
    }

    @Override
    public DatPhong update(DatPhongDTO datPhongDTO, Long id) {
        Optional<DatPhong> optionalDatPhong = datPhongRepository.findById(id);
        if (optionalDatPhong.isPresent()) {
            DatPhong datPhong = optionalDatPhong.get();
            datPhong.setNgayDat(datPhongDTO.getNgayDat());
            datPhong.setCheckIn(datPhongDTO.getCheckIn());
            datPhong.setCheckOut(datPhongDTO.getCheckOut());
            datPhong.setSoNguoi(datPhongDTO.getSoNguoi());
            datPhong.setGhiChu(datPhongDTO.getGhiChu());
            datPhong.setTrangThai(datPhongDTO.getTrangThai());
//            datPhong.setVoucher(Voucher.builder().id(datPhongDTO.getIdVoucher()).build());
            datPhong.setKhachHang(KhachHang.builder().id(datPhongDTO.getUserId()).build());
            return datPhongRepository.save(datPhong);
        }
        return null;
    }

    /**
     * @param page
     * @param size
     * @return
     * @throws ServiceException
     */
    @Override
    public PagedResponse<DatPhongResponse> getRoomOrder(int page, int size) throws ServiceException {
        if (page <= 0) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("page", ValidationErrorUtil.Invalid))
                    .build();
        }

        if (size > AppConstantsUtil.MAX_PAGE_SIZE) {
            List<KeyValue> params = new ArrayList<>();
            params.add(new KeyValue("max", String.valueOf(AppConstantsUtil.MAX_PAGE_SIZE)));

            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("pageSize", ValidationErrorUtil.Invalid, params))
                    .build();
        }

        // Retrieve all entities
        Pageable pageable = PageRequest.of((page - 1), size, Sort.Direction.DESC, "id");
        Page<DatPhong> entities = datPhongRepository.findAll(pageable);

        List<DatPhongResponse> dtos = this.datPhongMapper.toDtoList(entities.getContent());

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }

    @Override
    public PagedResponse<DatPhongResponse> getRoomOderByUser(int page, int size, Long id) throws ServiceException {
        if (page <= 0) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("page", ValidationErrorUtil.Invalid))
                    .build();
        }

        if (size > AppConstantsUtil.MAX_PAGE_SIZE) {
            List<KeyValue> params = new ArrayList<>();
            params.add(new KeyValue("max", String.valueOf(AppConstantsUtil.MAX_PAGE_SIZE)));

            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("pageSize", ValidationErrorUtil.Invalid, params))
                    .build();
        }

        // Retrieve all entities
        Pageable pageable = PageRequest.of((page - 1), size, Sort.Direction.ASC, "id");
        Page<DatPhong> entities = datPhongRepository.getAllDatPhongByUser(pageable, id);

        List<DatPhongResponse> dtos = this.datPhongMapper.toDtoList(entities.getContent());

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }

    @Override
    public PagedResponse<PhongResponse1> getPhongByUpperPrice(int page, int size, BigDecimal giaPhong, Long id, LocalDateTime checkIn, LocalDateTime checkOut) throws ServiceException {
        if (page <= 0) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("page", ValidationErrorUtil.Invalid))
                    .build();
        }

        if (size > AppConstantsUtil.MAX_PAGE_SIZE) {
            List<KeyValue> params = new ArrayList<>();
            params.add(new KeyValue("max", String.valueOf(AppConstantsUtil.MAX_PAGE_SIZE)));

            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("pageSize", ValidationErrorUtil.Invalid, params))
                    .build();
        }

        // Retrieve all entities
        Pageable pageable = PageRequest.of((page - 1), size, Sort.Direction.ASC, "id");
        Page<Phong> entities = datPhongRepository.getPhongByUpperPrice(pageable, giaPhong, id, checkIn, checkOut);

        List<PhongResponse1> dtos = this.phongMapper.toDtoList(entities.getContent());

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }


    @Override
    public Integer updateTrangThai(Long id) throws ServiceException {

        DatPhong datPhong = datPhongRepository.findById(id).get();
//        if (datPhong.getCheckIn().toLocalDate().isBefore(LocalDate.now()) || datPhong.getCheckIn().toLocalDate().equals(LocalDate.now())) {
//            throw new ServiceException(ValidationErrorUtil.DeleteRoomOrder);
//        }
        if (datPhong.getTrangThai() == 1) {
            this.datPhongRepository.updateTrangThaiById(0, id);
            HoaDon hoaDon = hoaDonRepository.findById(datPhong.getHoaDon().getId()).get();
            hoaDon.setTongTien(hoaDon.getTongTien().subtract(datPhong.getTongGia()));
            hoaDon.setTienPhong(hoaDon.getTienPhong().subtract(datPhong.getTongGia()));
            this.hoaDonRepository.save(hoaDon);
            return 1;
        }
        if (datPhong.getTrangThai() == 0) {
            return datPhongRepository.updateTrangThaiById(StatusRoom.STATUS1.getId(), id);
        }
        return null;
    }

    @Override
    public Integer updateStatus(Integer trangThai, Long id) throws ServiceException {
        DatPhong datPhong = datPhongRepository.findById(id).get();
        LocalDateTime localDateTime = LocalDateTime.now();
        LocalTime localTime = localDateTime.toLocalTime();
        System.out.println("Thời gian hiện tại theo giờ local là: " + localDateTime);

        // Lấy giờ local của một khu vực cụ thể, ví dụ: "Asia/Ho_Chi_Minh"
        ZoneId zoneId = ZoneId.of("Asia/Ho_Chi_Minh");
        LocalDateTime localDateTimeHoChiMinh = LocalDateTime.now(zoneId);
        System.out.println("Thời gian hiện tại ở Hồ Chí Minh là: " + localDateTimeHoChiMinh);

        if(trangThai == 3){
            if (datPhong.getCheckOut().getDayOfYear() == localDateTimeHoChiMinh.getDayOfYear()){
                if (localTime.isAfter(LocalTime.of(12, 0))) {
                    System.out.println(datPhong.getCheckOut().getDayOfYear() + " và " + localDateTimeHoChiMinh.getDayOfYear());
                    System.out.println("Đã quá 12 giờ trưa.");
                }
            }
            datPhong.setThoiGianCheckOut(localDateTimeHoChiMinh);
            datPhongRepository.save(datPhong);
        }
        return datPhongRepository.updateTrangThaiById(trangThai, id);
    }

    public Integer updateDatPhong(Long id, DatPhongDTO datPhongDTO) throws ServiceException {
        DatPhong datPhongCu = datPhongRepository.findById(id).get();
        if (datPhongDTO.getCheckIn().isAfter(datPhongDTO.getCheckOut())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckIn))
                    .build();
        }
        if (datPhongDTO.getCheckIn().toLocalDate().isBefore(LocalDate.now())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckInBeforeDateNow))
                    .build();
        }

        if (datPhongRepository.validateCheckIn(datPhongDTO.getIdPhong(), datPhongDTO.getCheckIn(), datPhongDTO.getCheckOut())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckDateBook))
                    .build();
        }
        this.datPhongRepository.updateDatPhongById(datPhongDTO.getIdPhong(), datPhongDTO.getTongGia(), id);
        HoaDon hoaDon = hoaDonRepository.findById(datPhongCu.getHoaDon().getId()).get();
        hoaDon.setTongTien(hoaDon.getTongTien().add(datPhongDTO.getTongGia()).subtract(datPhongCu.getTongGia()));
        this.hoaDonRepository.save(hoaDon);
        return 1;
    }

    @Override
    public PagedResponse<DatPhongResponse> getLichSuDatPhong(int page, int size, Long id) throws ServiceException {
        if (page <= 0) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("page", ValidationErrorUtil.Invalid))
                    .build();
        }

        if (size > AppConstantsUtil.MAX_PAGE_SIZE) {
            List<KeyValue> params = new ArrayList<>();
            params.add(new KeyValue("max", String.valueOf(AppConstantsUtil.MAX_PAGE_SIZE)));

            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("pageSize", ValidationErrorUtil.Invalid, params))
                    .build();
        }

        // Retrieve all entities
        Pageable pageable = PageRequest.of((page - 1), size, Sort.Direction.ASC, "id");
        Page<DatPhong> entities = datPhongRepository.getLichSuDatPhong(pageable, id);

        List<DatPhongResponse> dtos = this.datPhongMapper.toDtoList(entities.getContent());

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }

    @Override
    public PagedResponse<DatPhongResponse> getRoomOfBill(int page, int size, Long userId) throws ServiceException {
        if (page <= 0) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("page", ValidationErrorUtil.Invalid))
                    .build();
        }

        if (size > AppConstantsUtil.MAX_PAGE_SIZE) {
            List<KeyValue> params = new ArrayList<>();
            params.add(new KeyValue("max", String.valueOf(AppConstantsUtil.MAX_PAGE_SIZE)));

            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("pageSize", ValidationErrorUtil.Invalid, params))
                    .build();
        }

        // Retrieve all entities
        Pageable pageable = PageRequest.of((page - 1), size, Sort.Direction.ASC, "id");
        Long idKH = khachHangRepository.findByIdKhachHang(userId);
        Page<DatPhong> entities = datPhongRepository.getRoomByHoaDon(pageable, idKH);

        List<DatPhongResponse> dtos = this.datPhongMapper.toDtoList(entities.getContent());

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }

    @Override
    public PagedResponse<DatPhongResponse> getDatPhongByHoaDon(int page, int size, Long idHoaDon) throws ServiceException {
        if (page <= 0) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("page", ValidationErrorUtil.Invalid))
                    .build();
        }

        if (size > AppConstantsUtil.MAX_PAGE_SIZE) {
            List<KeyValue> params = new ArrayList<>();
            params.add(new KeyValue("max", String.valueOf(AppConstantsUtil.MAX_PAGE_SIZE)));

            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("pageSize", ValidationErrorUtil.Invalid, params))
                    .build();
        }

        // Retrieve all entities
        Pageable pageable = PageRequest.of((page - 1), size, Sort.Direction.ASC, "id");
        Page<DatPhong> entities = datPhongRepository.getPageDatPhongByHoaDon(pageable, idHoaDon);

        List<DatPhongResponse> dtos = this.datPhongMapper.toDtoList(entities.getContent());

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }



    @Override
    public Boolean createListRoom(List<DatPhongDTO> datPhongDTOList) throws ServiceException {
        for (DatPhongDTO datPhongDTO : datPhongDTOList) {
            if (datPhongDTO.getCheckIn().isAfter(datPhongDTO.getCheckOut()) && datPhongDTO.getCheckOut().toLocalDate().isAfter(datPhongDTO.getCheckIn().toLocalDate()) == false) {
                throw ServiceExceptionBuilderUtil.newBuilder()
                        .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckIn))
                        .build();
            }
            if (datPhongDTO.getCheckIn().toLocalDate().isBefore(LocalDate.now())) {
                throw ServiceExceptionBuilderUtil.newBuilder()
                        .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckInBeforeDateNow))
                        .build();
            }
            if (datPhongRepository.validateCheckIn(datPhongDTO.getIdPhong(), datPhongDTO.getCheckIn(), datPhongDTO.getCheckOut())) {
                throw ServiceExceptionBuilderUtil.newBuilder()
                        .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckDateBook))
                        .build();
            }
//            if(datPhongDTO.getCheckIn().toLocalDate() == datPhongDTO.getCheckOut().toLocalDate()){
//                throw ServiceExceptionBuilderUtil.newBuilder()
//                        .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckDateBook))
//                        .build();
//            }

            String autoGeneratedCode = generateAutoCode();

            DatPhong datPhong = new DatPhong();
            Random random = new Random();
            int min = 1;
            int max = Integer.MAX_VALUE;
            int ma = random.nextInt(max - min + 1) + min;
            datPhong.setMa("DP" + ma);
            datPhong.setNgayDat(LocalDateTime.now());
            datPhong.setCheckIn(datPhongDTO.getCheckIn());
            datPhong.setCheckOut(datPhongDTO.getCheckOut());
            datPhong.setSoNguoi(datPhongDTO.getSoNguoi());
            datPhong.setGhiChu(datPhongDTO.getGhiChu());
            datPhong.setTrangThai(datPhongDTO.getTrangThai());
            datPhong.setTongGia(datPhongDTO.getTongGia());

            Long idKhachHang = khachHangRepository.findByIdKhachHang(datPhongDTO.getUserId());
            datPhong.setKhachHang(KhachHang.builder().id(idKhachHang).build());
            datPhong.setPhong(Phong.builder().id(datPhongDTO.getIdPhong()).build());

            Long idHoaDon = hoaDonRepository.getId(idKhachHang, LocalDate.now());
            datPhong.setHoaDon(HoaDon.builder().id(idHoaDon).build());

            this.datPhongRepository.save(datPhong);
        }

        return true;
    }

    @Override
    public Boolean datPhongTaiQuay(DatPhongDTO datPhongDTO) throws ServiceException {
        ZoneId timeZone = ZoneId.of("Asia/Ho_Chi_Minh");
        if (datPhongDTO.getCheckIn().isAfter(datPhongDTO.getCheckOut())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckIn))
                    .build();
        }
//        if (datPhongDTO.getCheckIn().toLocalDate().isBefore(LocalDate.now())) {
//            throw ServiceExceptionBuilderUtil.newBuilder()
//                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckInBeforeDateNow))
//                    .build();
//        }
        System.out.println(datPhongDTO.getCheckIn() + " " + datPhongDTO.getCheckOut());
        if (datPhongRepository.validateCheckIn(datPhongDTO.getIdPhong(), datPhongDTO.getCheckIn(), datPhongDTO.getCheckOut())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkIn", ValidationErrorUtil.CheckDateBook))
                    .build();
        }
        if (datPhongDTO.getCheckOut().toLocalDate().equals(datPhongDTO.getCheckIn().toLocalDate())) {
            throw ServiceExceptionBuilderUtil.newBuilder()
                    .addError(new ValidationErrorResponse("checkOut", ValidationErrorUtil.CheckInBeforeDateNow))
                    .build();
        }
        Random random = new Random();
        int min = 1;
        int max = Integer.MAX_VALUE;
        int ma = random.nextInt(max - min + 1) + min;
        String autoGeneratedCode = generateAutoCode();
        ZonedDateTime checkInDate = datPhongDTO.getCheckIn().atZone(timeZone);
        ZonedDateTime adjustedCheckInDate = checkInDate.plusHours(7);
        ZonedDateTime checkOutDate = datPhongDTO.getCheckOut().atZone(timeZone);
        ZonedDateTime adjustedCheckOutDate = checkOutDate.plusHours(7);
        DatPhong datPhong = new DatPhong();
//        datPhong.setMa(autoGeneratedCode);
//        int startIndex = datPhongRepository.findAll().get(datPhongRepository.findAll().size() - 1).getMa().indexOf("D") + 2; // Bắt đầu từ vị trí sau chữ 'D'
//        String numberStr = datPhongRepository.findAll().get(datPhongRepository.findAll().size() - 1).getMa().substring(startIndex);
//        int numberDP = Integer.parseInt(numberStr);
        datPhong.setMa("DP" + ma);
        datPhong.setNgayDat(LocalDateTime.now());
        datPhong.setCheckIn(adjustedCheckInDate.toLocalDateTime());
        datPhong.setCheckOut(adjustedCheckOutDate.toLocalDateTime());
        datPhong.setSoNguoi(datPhongDTO.getSoNguoi());
        datPhong.setGhiChu(datPhongDTO.getGhiChu());
        datPhong.setTrangThai(datPhongDTO.getTrangThai());
        datPhong.setTongGia(datPhongDTO.getTongGia());
//        if(datPhongDTO.getIdVoucher() != null){
//            Voucher voucher = voucherRepository.findById(datPhongDTO.getIdVoucher()).get();
//            datPhong.setVoucher(Voucher.builder().id(datPhongDTO.getIdVoucher()).build());
//            voucher.setSoLuong(voucher.getSoLuong() - 1);
//            this.voucherRepository.save(voucher);
//        }
//        Long idKhachHang = khachHangRepository.findByIdKhachHang(datPhongDTO.getUserId());
        datPhong.setKhachHang(KhachHang.builder().id(datPhongDTO.getIdKhachHang()).build());
        datPhong.setPhong(Phong.builder().id(datPhongDTO.getIdPhong()).build());
        List<HoaDon> listHD = hoaDonRepository.findAll();
        Long idHoaDon = listHD.get(listHD.size() - 1).getId();
        System.out.println(datPhongDTO.getIdKhachHang());
        datPhong.setHoaDon(HoaDon.builder().id(idHoaDon).build());
        this.datPhongRepository.save(datPhong);
        return true;
    }

    @Override
    public int getSoPhongDaDat(LocalDate CheckIn, LocalDate CheckOut) {
        return datPhongRepository.getSoPhongDaDat(CheckIn, CheckOut);
    }

    @Override
    public int getSoPhongDaDatByToDay(int day, int month, int year) {
        return datPhongRepository.getSoPhongDaDatByToDay(day, month, year);
    }

    @Override
    public int getSoPhongDaDatByMonth(int month, int year) {
        return datPhongRepository.getSoPhongDaDatByMonth(month, year);
    }

    @Override
    public int getSoPhongDaDatByYear(int year) {
        return datPhongRepository.getSoPhongDaDatByYear(year);
    }

    @Override
    public PagedResponse<DatPhongResponse> getDatPhongByKH(int page, int size, Long id) throws ServiceException {
        Pageable pageable = PageRequest.of((page - 1), size, Sort.Direction.ASC, "id");
        Page<DatPhong> entities = datPhongRepository.getPageDatPhongByKH(pageable, id);

        List<DatPhongResponse> dtos = this.datPhongMapper.toDtoList(entities.getContent());

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }

    @Override
    public PagedResponse<DatPhongMapping> getListDatPhongMapping(int page, int size) {
        Pageable pageable = PageRequest.of((page - 1), size);
        Page<DatPhongMapping> entities = datPhongRepository.getPageDatPhong(pageable);

        List<DatPhongMapping> dtos = entities.toList();

        return new PagedResponse<>(
                dtos,
                page,
                size,
                entities.getTotalElements(),
                entities.getTotalPages(),
                entities.isLast(),
                entities.getSort().toString()
        );
    }

    @Override
    public DatPhongMap getPhongById(Long id) {
        return datPhongRepository.getPhongById(id);
    }

    @Override
    public List<DatPhongMapping> getListMappingByHD(Long id, Long idHD) {
        List<DatPhongMapping> listDP = new ArrayList<>();
        for(int x = 0;x < datPhongRepository.getListDatPhong().size();x++){
            if(Objects.equals(datPhongRepository.getListDatPhong().get(x).getIdHoaDon(), idHD) && !Objects.equals(datPhongRepository.getListDatPhong().get(x).getIdDatPhong(), id)){
                listDP.add(datPhongRepository.getListDatPhong().get(x));
            }
        }
        return listDP;
    }

    @Override
    public List<DatPhongMapping> getListMappingByDate(Long id, LocalDate checkIn, LocalDate checkOut) {
        return datPhongRepository.getListDatPhongByDate(id, checkIn, checkOut);
    }

    @Override
    public Integer doiPhongById(Long idPhong, Long id) {
        return datPhongRepository.doiPhongById(idPhong, id);
    }

    @Override
    public List<DatPhongMapping> getListCheckOutToday(LocalDate checkOut) {
        return datPhongRepository.getListCheckOutToDay(checkOut);
    }

    @Override
    public DatPhongMapping getRoomCheckInToday(LocalDate checkIn, Long id) {
        return datPhongRepository.getRoomCheckInToDay(checkIn, id);
    }

    @Override
    public List<MonthlyBookingDTO> getMonthlyBookings() {
        return datPhongRepository.findMonthlyBookings();
    }

    @Override
    public List<PhongResponse1> listRoomBooks(String cccd) {
        List<Phong> listPhong = phongRepository.findAll();
        List<PhongResponse1> result = new ArrayList<>();

        for (Phong phong : listPhong) {
            List<DatPhongMapping> listDatPhong = datPhongRepository.getListDatPhongByDate(phong.getId(), LocalDate.now(), LocalDate.now());

            boolean matches = listDatPhong.stream().anyMatch(datPhong -> datPhong.getCccd().equals(cccd));

            if (matches) {
                PhongResponse1 response = convertToPhongResponse1(phong);
                result.add(response);
            }
        }

        return result;
    }

    @Override
    public List<DatPhongMapping> getListMappingByKHAndCheckIn(LocalDate checkIn, Long id) {
        if(checkIn == null || checkIn.toString().isEmpty()){
            return datPhongRepository.getListDatPhongByKH(id);
        }
        return datPhongRepository.getListDatPhongByKHAndCheckIn(checkIn, id);
    }

    @Override
    public Boolean updateCheckout(LocalDate checkIn, LocalDate checkOut, Long id, Long idPhong) throws ServiceException {
        // Chuyển đổi LocalDate thành LocalDateTime
        LocalDateTime checkOutDateTime = checkOut.atStartOfDay();

        List<DatPhongResponse> listDatPhong = datPhongRepository.getAllDatPhong();
        // Tập hợp các trạng thái hợp lệ
        Set<Integer> validTrangThai = Set.of(RoomOrderStatus.STATUS1.getId(), RoomOrderStatus.STATUS2.getId(), 4, 5);
        List<DatPhongResponse> filteredList = listDatPhong.stream()
                .filter(datPhong -> validTrangThai.contains(datPhong.getTrangThai()) &&
                        !Objects.equals(datPhong.getId(), id))
                .collect(Collectors.toList());

        for (DatPhongResponse reservation : filteredList) {
            LocalDate existingCheckIn = LocalDate.from(reservation.getCheckIn());
            LocalDate existingCheckOut = LocalDate.from(reservation.getCheckOut());

            boolean isOverlapping = (checkOutDateTime.isAfter(existingCheckIn.atStartOfDay()) ||
                    checkOutDateTime.isEqual(existingCheckIn.atStartOfDay())) &&
                    checkOutDateTime.isBefore(existingCheckOut.atStartOfDay());

            boolean isExactMatch = checkOutDateTime.isEqual(existingCheckIn.atStartOfDay());

            if (isOverlapping && !isExactMatch) {
                throw new ServiceException1("Phòng đã có khách đặt trong ngày đó", HttpStatus.BAD_REQUEST);
            }
        }


        // Tìm kiếm đặt phòng theo id
        Optional<DatPhong> optionalDatPhong = datPhongRepository.findById(id);
        if (optionalDatPhong.isPresent()) {
            // Nếu tìm thấy, cập nhật ngày checkOut và lưu lại
            DatPhong datPhong = optionalDatPhong.get();

            //Cập nhật tiền phòng và hóa đơn
            BigDecimal giaPhong = datPhong.getPhong().getLoaiPhong().getGiaTheoNgay();
            LocalDateTime checkOutCu = datPhong.getCheckOut();
            int soNgay = checkOutDateTime.getDayOfYear() - checkOutCu.getDayOfYear();
            HoaDon hoaDon = hoaDonRepository.findById(datPhong.getHoaDon().getId()).get();
            if(soNgay > 0){
                datPhong.setTongGia(datPhong.getTongGia().add(giaPhong.multiply(BigDecimal.valueOf(soNgay))));
                hoaDon.setTongTien(hoaDon.getTongTien().add(giaPhong.multiply(BigDecimal.valueOf(soNgay))));
                this.hoaDonRepository.updateTienPhongById(hoaDon.getTienPhong().add(giaPhong.multiply(BigDecimal.valueOf(soNgay))), hoaDon.getId());
            }
            if(soNgay < 0){
                datPhong.setTongGia(datPhong.getTongGia().subtract(giaPhong.multiply(BigDecimal.valueOf(-soNgay))));
                hoaDon.setTongTien(hoaDon.getTongTien().subtract(giaPhong.multiply(BigDecimal.valueOf(-soNgay))));
                this.hoaDonRepository.updateTienPhongById(hoaDon.getTienPhong().subtract(giaPhong.multiply(BigDecimal.valueOf(-soNgay))), hoaDon.getId());
            }
            datPhong.setCheckOut(checkOutDateTime);
            try {
                datPhongRepository.save(datPhong);
            } catch (Exception e) {
                // Xử lý nếu có lỗi trong quá trình lưu vào database
                throw new RuntimeException("Error saving DatPhong", e);
            }
        } else {
            // Xử lý nếu không tìm thấy đặt phòng
            throw new RuntimeException("DatPhong not found with id: " + id);
        }

        return true;
    }

    @Override
    public List<CustomerUseRoom> getListCustomerUseRoom() {
        List<CustomerUseRoom> customerUseRoomList = datPhongRepository.getListCustomerUseRoom();
        List<CustomerUseRoom> filteredList = customerUseRoomList.stream()
                .filter(x -> x.getTrangThaiDatPhong() == RoomOrderStatus.STATUS2.getId())
                .sorted(Comparator.comparing(CustomerUseRoom::getMaPhong))
//                .sorted(Comparator.comparing(CustomerUseRoom::getMaPhong).reversed()) // sx theo giảm dần
                .collect(Collectors.toList());

        return filteredList;
    }


    private PhongResponse1 convertToPhongResponse1(Phong phong) {
        PhongResponse1 response = new PhongResponse1();
        response.setId(phong.getId());
        response.setMa(phong.getMa());
        response.setTenLoaiPhong(phong.getLoaiPhong().getTenLoaiPhong());
        response.setGiaPhong(phong.getGiaPhong());
        response.setTrangThai(phong.getTrangThai());
        return response;
    }

    @Override
    public List<DatPhongMapping> checkListMappingByDate(Long id, LocalDate checkIn, LocalDate checkOut) {
        return datPhongRepository.checkListDatPhongByDate(id, checkIn, checkOut);
    }

    @Override
    public Integer updateIdHoaDonByDatPhong(Long id) {
        List<HoaDon> listHD = hoaDonRepository.findAll();
        Long idHoaDon = listHD.get(listHD.size() - 1).getId();
        return datPhongRepository.doiHoaDonById(idHoaDon, id);
    }

    @Override
    public List<DatPhong> getCheckOutToDay(LocalDate checkOut, Long id) {
        return datPhongRepository.getCheckOutToDay(checkOut, id);
    }

    @Override
    public Integer checkOutMuon(String ghiChu, Long id) throws ServiceException {
        DatPhong datPhong = datPhongRepository.findById(id).get();
        LocalDateTime localDateTime = LocalDateTime.now();
        LocalTime localTime = localDateTime.toLocalTime();
        System.out.println("Thời gian hiện tại theo giờ local là: " + localDateTime);

        // Lấy giờ local của một khu vực cụ thể, ví dụ: "Asia/Ho_Chi_Minh"
        ZoneId zoneId = ZoneId.of("Asia/Ho_Chi_Minh");
        LocalDateTime localDateTimeHoChiMinh = LocalDateTime.now(zoneId);
        return datPhongRepository.checkOutMuon(ghiChu, localDateTimeHoChiMinh, id);
    }

    @Override
    public Integer updateTienDatPhongById(BigDecimal tienPhong, Long id) {
        DatPhong datPhong = datPhongRepository.findById(id).get();
        if(tienPhong != null){
            datPhong.setTongGia(datPhong.getTongGia().subtract(tienPhong));
        }
        datPhongRepository.save(datPhong);
        return 1;
    }

}
